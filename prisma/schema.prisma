generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.dev"
}

model UserOnTest {
  user_id    String
  test_id    String
  is_teacher Boolean  @default(false)
  points     Float?
  created_at DateTime @default(now())
  test       Test     @relation(fields: [test_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, test_id])
  @@map("user_on_test")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  avatar     String?
  created_at DateTime     @default(now())
  answers    Answer[]
  tests      UserOnTest[]

  @@map("users")
}

model Test {
  id            String       @id @default(uuid())
  title         String
  is_open       Boolean      @default(false)
  max_questions Int          @default(-1)
  randomize     Boolean      @default(false)
  clue_detect   Boolean      @default(false)
  time_mode     String       @default("total")
  can_edit      Boolean      @default(true)
  questions     Question[]
  users         UserOnTest[]

  @@map("tests")
}

model Question {
  id          String   @id @default(uuid())
  test_id     String
  title       String
  description String?
  value       Float    @default(0)
  time        Int      @default(-1)
  type        String
  test        Test     @relation(fields: [test_id], references: [id], onDelete: Cascade)
  answers     Answer[]
  options     Option[]

  @@map("questions")
}

model Option {
  id          String   @id @default(uuid())
  question_id String
  title       String
  description String?
  is_correct  Boolean
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@map("options")
}

model Answer {
  id          String   @id @default(uuid())
  question_id String
  option_id   String
  user_id     String
  option      Option   @relation(fields: [option_id], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("answers")
}
